type Query {
    page(
        page: Int = 1
        perPage: Int = 10
        sort: Sort = {orderBy: "shikimoriId", direction: "ASC"}
        search: String
        filter: AnimeFilter
    ): Page

    anime(
        shikimoriId: String!
    ): Anime

    genres: [Genre!]
    tags(
        search: String,
        limit: Int
    ): [Tag!]
    studios: [String!]
    kinds: [String!]
    ratings: [String!]
}

type Mutation {
    createAnime(input: AnimeRaw): Anime!
    updateAnime(shikimoriId: String!, input: AnimeRaw!): Anime!
    deleteAnime(shikimoriId: String!): Anime
}

input AnimeFilter {
    genres: [String!]
    tags: [String!]
    studios: [String!]
    kind: [Kind!]
    rating: [Rating!]
    status: String
    episodes: Int
    score: Float
}


input Sort {
    orderBy: String
    direction: String
}

type Page {
    pageInfo: PageInfo!
    media: [Anime!]!
}

type PageInfo {
    totalPages: Int
    currentPage: Int
    hasNextPage: Boolean
    lastPage: Int
    perPage: Int
}

type Anime {
    id: ID!
    title: Title
    synonyms: [String!]
    description: Description
    shikimoriScore: Float
    shikimoriUrl: String
    shikimoriId: String
    watchRating: String
    episodes: Int
    duration: Int
    externalLinks: [ExternalLink!]
    kind: Kind
    rating: Rating
    status: Status
    startDate: String
    endDate: String
    coverImage: CoverImage
    genres: [Genre!]
    studios: [String!]
    tags: [Tag!]
    averageScore: Float
    scoreCount: Int
}

type Title {
    EN: String
    RU: String
    ROMAJI: String
    NATIVE: String
}

type Description {
    EN: String
    RU: String
}

type ExternalLink {
    source: String
    url: String
}

enum Kind {
    tv, movie, ova, ona, special, tv_special, music, cm
}

enum Rating {
    g, pg, pg_13, r, r_plus
}

type Status {
    EN: String
    RU: String
}

type CoverImage {
    extraLarge: String
    large: String
    medium: String
    color: String
    banner: String
}

type Genre {
    EN: String
    RU: String
}

type Tag {
    RU: TagTranslations
    EN: TagTranslations
    rank: Int
    isSpoiler: Boolean
}

type TagTranslations {
    name: String
    description: String
}

input AnimeRaw {
    title: TitleInput
    synonyms: [String!]
    description: DescriptionInput
    shikimoriScore: Float
    shikimoriUrl: String
    shikimoriId: String
    watchRating: String
    episodes: Int
    duration: Int
    externalLinks: [ExternalLinkInput!]
    kind: Kind
    rating: Rating
    status: StatusInput
    startDate: String
    endDate: String
    coverImage: CoverImageInput
    genres: [GenreInput!]
    studios: [String!]
    tags: [TagInput!]
}

input TitleInput {
    EN: String
    RU: String
    ROMAJI: String
    NATIVE: String
}

input DescriptionInput {
    EN: String
    RU: String
}

input ExternalLinkInput {
    source: String
    url: String
}

input StatusInput {
    EN: String
    RU: String
}

input CoverImageInput {
    extraLarge: String
    large: String
    medium: String
    color: String
    banner: String
}

input GenreInput {
    EN: String
    RU: String
}

input TagInput {
    RU: TagTranslationsInput
    EN: TagTranslationsInput
    rank: Int
    isSpoiler: Boolean
}

input TagTranslationsInput {
    name: String
    description: String
}